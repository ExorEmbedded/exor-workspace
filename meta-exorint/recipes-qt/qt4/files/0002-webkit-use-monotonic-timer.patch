diff -uNr qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.cpp qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.cpp
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.cpp	2013-06-07 07:16:54.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.cpp	2018-07-10 14:28:48.945801299 +0200
@@ -292,6 +301,17 @@
     return now.tv_sec + now.tv_usec / 1000000.0;
 }
 
+double monotonicTime()
+{
+    struct timespec time;
+    const int err = clock_gettime(CLOCK_MONOTONIC, &time);
+
+    if (err == -1)
+        return 0;
+
+    return time.tv_sec + time.tv_nsec * 1e-9;
+}
+
 #endif
 
 } // namespace WTF
diff -uNr qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.h qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.h
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.h	2013-06-07 07:16:54.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/JavaScriptCore/wtf/CurrentTime.h	2018-07-03 16:35:05.829747433 +0200
@@ -40,6 +40,7 @@
 // Precision varies depending on platform but is usually as good or better
 // than a millisecond.
 double currentTime();
+double monotonicTime();
 
 // Same thing, in milliseconds.
 inline double currentTimeMS()
@@ -47,6 +48,11 @@
     return currentTime() * 1000.0;
 }
 
+inline double monotonicTimeMS()
+{
+    return currentTime() * 1000.0;
+}
+
 inline void getLocalTime(const time_t* localTime, struct tm* localTM)
 {
 #if COMPILER(MSVC7_OR_LOWER) || COMPILER(MINGW) || OS(WINCE)
@@ -62,6 +68,8 @@
 
 using WTF::currentTime;
 using WTF::currentTimeMS;
+using WTF::monotonicTime;
+using WTF::monotonicTimeMS;
 using WTF::getLocalTime;
 
 #endif // CurrentTime_h
diff -uNr qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/platform/ThreadTimers.cpp qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/WebCore/platform/ThreadTimers.cpp
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/platform/ThreadTimers.cpp	2013-06-07 07:16:55.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/WebCore/platform/ThreadTimers.cpp	2018-07-03 17:20:49.552692356 +0200
@@ -97,7 +97,7 @@
         return;
     m_firingTimers = true;
 
-    double fireTime = currentTime();
+    double fireTime = monotonicTime();
     double timeToQuit = fireTime + maxDurationOfFiringTimers;
 
     while (!m_timerHeap.isEmpty() && m_timerHeap.first()->m_nextFireTime <= fireTime) {
@@ -112,7 +112,7 @@
         timer->fired();
 
         // Catch the case where the timer asked timers to fire in a nested event loop, or we are over time limit.
-        if (!m_firingTimers || timeToQuit < currentTime())
+        if (!m_firingTimers || timeToQuit < monotonicTime())
             break;
     }
 
diff -uNr qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/platform/Timer.cpp qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/WebCore/platform/Timer.cpp
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/platform/Timer.cpp	2013-06-07 07:16:56.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5.2/src/3rdparty/webkit/Source/WebCore/platform/Timer.cpp	2018-07-03 17:23:26.483383231 +0200
@@ -181,7 +181,7 @@
     ASSERT(m_thread == currentThread());
 
     m_repeatInterval = repeatInterval;
-    setNextFireTime(currentTime() + nextFireInterval);
+    setNextFireTime(monotonicTime() + nextFireInterval);
 }
 
 void TimerBase::stop()
@@ -199,7 +199,7 @@
 double TimerBase::nextFireInterval() const
 {
     ASSERT(isActive());
-    double current = currentTime();
+    double current = monotonicTime();
     if (m_nextFireTime < current)
         return 0;
     return m_nextFireTime - current;
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebKit2/WebProcess/WebPage/DrawingAreaImpl.cpp	2013-06-07 07:16:53.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5-2/src/3rdparty/webkit/Source/WebKit2/WebProcess/WebPage/DrawingAreaImpl.cpp	2018-07-13 09:09:16.946837004 +0200
@@ -484,7 +484,7 @@
 {
     static const double minimumFrameInterval = 1.0 / 60.0;
     
-    double timeSinceLastDisplay = currentTime() - m_lastDisplayTime;
+    double timeSinceLastDisplay = monotonicTime() - m_lastDisplayTime;
     double timeUntilLayerTreeHostNeedsDisplay = m_layerTreeHost && m_layerTreeHost->participatesInDisplay() ? m_layerTreeHost->timeUntilNextDisplay() : 0;
     double timeUntilNextDisplay = max(minimumFrameInterval - timeSinceLastDisplay, timeUntilLayerTreeHostNeedsDisplay);
 
@@ -617,7 +617,7 @@
     // until the UI process has painted the update, so we stop the timer here.
     m_displayTimer.stop();
 
-    m_lastDisplayTime = currentTime();
+    m_lastDisplayTime = monotonicTime();
 }


--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/wtf/qt/ThreadingQt.cpp	2013-06-07 07:16:54.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5-2/src/3rdparty/webkit/Source/JavaScriptCore/wtf/qt/ThreadingQt.cpp	2018-07-13 08:23:38.279279514 +0200
@@ -255,7 +255,7 @@
 
 bool ThreadCondition::timedWait(Mutex& mutex, double absoluteTime)
 {
-    double currentTime = WTF::currentTime();
+    double currentTime = WTF::monotonicTime();
 
     // Time is in the past - return immediately.
     if (absoluteTime < currentTime)
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MainThread.cpp	2018-07-11 15:27:02.267610526 +0200
+++ qt-everywhere-opensource-src-4.8.5-2/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MainThread.cpp	2018-07-13 08:45:38.816468289 +0200
@@ -141,7 +141,7 @@
     if (callbacksPaused)
         return;
 
-    double startTime = currentTime();
+    double startTime = monotonicTime();
 
     FunctionWithContext invocation;
     while (true) {
@@ -162,7 +162,7 @@
         // yield so the user input can be processed. Otherwise user may not be able to even close the window.
         // This code has effect only in case the scheduleDispatchFunctionsOnMainThread() is implemented in a way that
         // allows input events to be processed before we are back here.
-        if (currentTime() - startTime > maxRunLoopSuspensionTime) {
+        if (monotonicTime() - startTime > maxRunLoopSuspensionTime) {
             scheduleDispatchFunctionsOnMainThread();
             break;
         }
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/runtime/TimeoutChecker.cpp	2018-07-11 15:27:22.263873923 +0200
+++ qt-everywhere-opensource-src-4.8.5-2/src/3rdparty/webkit/Source/JavaScriptCore/runtime/TimeoutChecker.cpp	2018-07-13 08:56:22.104730078 +0200
@@ -100,8 +100,8 @@
     // FIXME: We should return the time the current thread has spent executing.
 
     // use a relative time from first call in order to avoid an overflow
-    static double firstTime = currentTime();
-    return static_cast<unsigned> ((currentTime() - firstTime) * 1000);
+    static double firstTime = monotonicTime();
+    return static_cast<unsigned> ((monotonicTime() - firstTime) * 1000);
 #endif
 }

--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp	2018-07-11 15:27:47.356204726 +0200
+++ qt-everywhere-opensource-src-4.8.5-2/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp	2018-07-13 09:05:53.320179461 +0200
@@ -126,12 +126,12 @@
 
 void StopWatch::start()
 {
-    m_startTime = currentTime();
+    m_startTime = monotonicTime();
 }
 
 void StopWatch::stop()
 {
-    m_stopTime = currentTime();
+    m_stopTime = monotonicTime();
 }
 
 long StopWatch::getElapsedMS()
--- qt4-x11-free/4.8.5-r0.x4/qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp	2013-06-07 07:16:55.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp	2018-07-13 08:48:35.018736074 +0200
@@ -386,7 +386,7 @@
     , m_ignoreDestructiveWriteCount(0)
     , m_titleSetExplicitly(false)
     , m_updateFocusAppearanceTimer(this, &Document::updateFocusAppearanceTimerFired)
-    , m_startTime(currentTime())
+    , m_startTime(monotonicTime())
     , m_overMinimumLayoutThreshold(false)
     , m_extraLayoutDelay(0)
     , m_scriptRunner(ScriptRunner::create(this))
@@ -2198,7 +2198,7 @@
 
 int Document::elapsedTime() const
 {
-    return static_cast<int>((currentTime() - m_startTime) * 1000);
+    return static_cast<int>((monotonicTime() - m_startTime) * 1000);
 }
 
 void Document::write(const SegmentedString& text, Document* ownerDocument)
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/platform/qt/SharedTimerQt.cpp	2013-06-07 07:16:56.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/platform/qt/SharedTimerQt.cpp	2018-07-13 09:36:32.200596603 +0200
@@ -94,7 +94,7 @@
 
 void SharedTimerQt::start(double fireTime)
 {
-    double interval = fireTime - currentTime();
+    double interval = fireTime - monotonicTime();
     unsigned int intervalInMS;
     if (interval < 0)
         intervalInMS = 0;
--- qt4-x11-free/4.8.5-r0.x4/qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/page/FrameView.cpp	2013-06-07 07:16:55.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/page/FrameView.cpp	2018-07-13 08:49:59.431822962 +0200
@@ -1670,7 +1670,7 @@
     ASSERT(!m_deferringRepaints);
     if (!m_deferredRepaintDelay)
         return 0;
-    double timeSinceLastPaint = currentTime() - m_lastPaintTime;
+    double timeSinceLastPaint = monotonicTime() - m_lastPaintTime;
     return max(0., m_deferredRepaintDelay - timeSinceLastPaint);
 }
     
@@ -2370,7 +2370,7 @@
 
     bool isTopLevelPainter = !sCurrentPaintTimeStamp;
     if (isTopLevelPainter)
-        sCurrentPaintTimeStamp = currentTime();
+        sCurrentPaintTimeStamp = monotonicTime();
     
     RenderView* contentRenderer = frame()->contentRenderer();
     if (!contentRenderer) {
@@ -2423,7 +2423,7 @@
         notifyWidgetsInAllFrames(DidPaintFlattened);
 
     m_paintBehavior = oldPaintBehavior;
-    m_lastPaintTime = currentTime();
+    m_lastPaintTime = monotonicTime();
 
 #if ENABLE(DASHBOARD_SUPPORT)
     // Regions may have changed as a result of the visibility/z-index of element changing.
--- qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/svg/animation/SMILTimeContainer.cpp	2013-06-07 07:16:55.000000000 +0200
+++ qt-everywhere-opensource-src-4.8.5/src/3rdparty/webkit/Source/WebCore/svg/animation/SMILTimeContainer.cpp	2018-07-13 09:02:52.009803218 +0200
@@ -83,7 +83,7 @@
 {
     if (!m_beginTime)
         return 0;
-    return currentTime() - m_beginTime - m_accumulatedPauseTime;
+    return monotonicTime() - m_beginTime - m_accumulatedPauseTime;
 }
     
 bool SMILTimeContainer::isActive() const
@@ -99,7 +99,7 @@
 void SMILTimeContainer::begin()
 {
     ASSERT(!m_beginTime);
-    m_beginTime = currentTime();
+    m_beginTime = monotonicTime();
     updateAnimations(0);
 }
 
@@ -108,7 +108,7 @@
     if (!m_beginTime)
         return;
     ASSERT(!isPaused());
-    m_pauseTime = currentTime();
+    m_pauseTime = monotonicTime();
     m_timer.stop();
 }
 
@@ -117,7 +117,7 @@
     if (!m_beginTime)
         return;
     ASSERT(isPaused());
-    m_accumulatedPauseTime += currentTime() - m_pauseTime;
+    m_accumulatedPauseTime += monotonicTime() - m_pauseTime;
     m_pauseTime = 0;
     startTimer(0);
 }

