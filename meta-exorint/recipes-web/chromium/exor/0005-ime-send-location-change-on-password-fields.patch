--- chromium-52.0.2743.76/ui/base/ime/input_method_auralinux.cc	2017-04-18 12:17:06.116810844 +0200
+++ chromium-52.0.2743.76.2/ui/base/ime/input_method_auralinux.cc	2017-04-18 12:01:33.134818902 +0200
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+
 #include "ui/base/ime/input_method_auralinux.h"
 
 #include "base/auto_reset.h"
@@ -86,23 +87,20 @@
   bool filtered = false;
   {
     base::AutoReset<bool> flipper(&is_sync_mode_, true);
-    if (text_input_type_ != TEXT_INPUT_TYPE_NONE &&
-        text_input_type_ != TEXT_INPUT_TYPE_PASSWORD) {
+    if (text_input_type_ != TEXT_INPUT_TYPE_NONE) {
       filtered = context_->DispatchKeyEvent(*event);
     } else {
       filtered = context_simple_->DispatchKeyEvent(*event);
     }
   }
 
-  // If there's an active IME extension is listening to the key event, and the
-  // current text input client is not password input client, the key event
-  // should be dispatched to the extension engine in the two conditions:
+  // If there's an active IME extension is listening to the key event the key
+  // event should be dispatched to the extension engine in the two conditions:
   // 1) |filtered| == false: the ET_KEY_PRESSED event of non-character key,
   // or the ET_KEY_RELEASED event of all key.
   // 2) |filtered| == true && NeedInsertChar(): the ET_KEY_PRESSED event of
   // character key.
-  if (text_input_type_ != TEXT_INPUT_TYPE_PASSWORD &&
-      GetEngine() && GetEngine()->IsInterestedInKeyEvent() &&
+  if (GetEngine() && GetEngine()->IsInterestedInKeyEvent() &&
       (!filtered || NeedInsertChar())) {
     ui::IMEEngineHandlerInterface::KeyEventDoneCallback callback = base::Bind(
         &InputMethodAuraLinux::ProcessKeyEventByEngineDone,
@@ -280,8 +278,7 @@
   NotifyTextInputCaretBoundsChanged(client);
   context_->SetCursorLocation(GetTextInputClient()->GetCaretBounds());
 
-  if (!IsTextInputTypeNone() && text_input_type_ != TEXT_INPUT_TYPE_PASSWORD &&
-      GetEngine())
+  if (!IsTextInputTypeNone() && GetEngine())
     GetEngine()->SetCompositionBounds(GetCompositionBounds(client));
 }
 
