Upstream-Status: Backport

Required to fix the build with GCC:

../../base/optional.h: In instantiation of ‘void base::internal::OptionalStorageBase<T, <anonymous> >::Init(Args&& ...) [with Args = {const blink::FloatClipRecorder&}; T = blink::FloatClipRecorder; bool <anonymous> = false]’:
../../base/optional.h:131:11:   required from ‘base::internal::OptionalStorage<T, <anonymous>, <anonymous> >::OptionalStorage(const base::internal::OptionalStorage<T, <anonymous>, <anonymous> >&) [with T = blink::FloatClipRecorder; bool <anonymous> = false; bool <anonymous> = false]’
../../base/optional.h:198:13:   required from ‘struct std::is_trivially_copy_constructible<blink::ClipPathClipper>’
../../base/template_util.h:137:8:   required from ‘struct base::is_trivially_copy_constructible<blink::ClipPathClipper>’
../../base/optional.h:248:22:   required from ‘class base::internal::OptionalBase<blink::ClipPathClipper>’
../../base/optional.h:265:7:   required from ‘class base::Optional<blink::ClipPathClipper>’
../../third_party/WebKit/Source/core/paint/SVGPaintContext.h:140:29:   required from here
../../base/optional.h:56:5: error: ‘blink::FloatClipRecorder::FloatClipRecorder(const blink::FloatClipRecorder&)’ is private within this context
     ::new (&value_) T(std::forward<Args>(args)...);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Signed-off-by: Raphael Kubo da Costa <raphael.kubo.da.costa@intel.com>
---
From 5cae9645215d02cb1f986a181a208f8a4817fc86 Mon Sep 17 00:00:00 2001
From: Hidehiko Abe <hidehiko@chromium.org>
Date: Fri, 26 Jan 2018 18:01:11 +0000
Subject: [PATCH] Implement conditional copy/move ctors/assign-operators.

BUG=784732
TEST=Ran trybot.

Change-Id: Iec5f9eaa7482d4e23f5bf2eea4b34c9cd867f89d
Reviewed-on: https://chromium-review.googlesource.com/856021
Commit-Queue: Hidehiko Abe <hidehiko@chromium.org>
Reviewed-by: danakj <danakj@chromium.org>
Cr-Commit-Position: refs/heads/master@{#532004}
---
 base/optional.h           | 63 +++++++++++++++++++++++++++++++++++--
 base/optional_unittest.cc | 80 +++++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 134 insertions(+), 9 deletions(-)

diff --git a/base/optional.h b/base/optional.h
index e71f12c9f82e..dc7753908754 100644
--- a/base/optional.h
+++ b/base/optional.h
@@ -265,6 +265,58 @@ class OptionalBase {
   OptionalStorage<T> storage_;
 };
 
+// The following {Copy,Move}{Constructible,Assignable} structs are helpers to
+// implement constructor/assign-operator overloading. Specifically, if T is
+// is not movable but copyable, Optional<T>'s move constructor should not
+// participate in overload resolution. This inheritance trick implements that.
+template <bool is_copy_constructible>
+struct CopyConstructible {};
+
+template <>
+struct CopyConstructible<false> {
+  constexpr CopyConstructible() = default;
+  constexpr CopyConstructible(const CopyConstructible&) = delete;
+  constexpr CopyConstructible(CopyConstructible&&) = default;
+  CopyConstructible& operator=(const CopyConstructible&) = default;
+  CopyConstructible& operator=(CopyConstructible&&) = default;
+};
+
+template <bool is_move_constructible>
+struct MoveConstructible {};
+
+template <>
+struct MoveConstructible<false> {
+  constexpr MoveConstructible() = default;
+  constexpr MoveConstructible(const MoveConstructible&) = default;
+  constexpr MoveConstructible(MoveConstructible&&) = delete;
+  MoveConstructible& operator=(const MoveConstructible&) = default;
+  MoveConstructible& operator=(MoveConstructible&&) = default;
+};
+
+template <bool is_copy_assignable>
+struct CopyAssignable {};
+
+template <>
+struct CopyAssignable<false> {
+  constexpr CopyAssignable() = default;
+  constexpr CopyAssignable(const CopyAssignable&) = default;
+  constexpr CopyAssignable(CopyAssignable&&) = default;
+  CopyAssignable& operator=(const CopyAssignable&) = delete;
+  CopyAssignable& operator=(CopyAssignable&&) = default;
+};
+
+template <bool is_move_assignable>
+struct MoveAssignable {};
+
+template <>
+struct MoveAssignable<false> {
+  constexpr MoveAssignable() = default;
+  constexpr MoveAssignable(const MoveAssignable&) = default;
+  constexpr MoveAssignable(MoveAssignable&&) = default;
+  MoveAssignable& operator=(const MoveAssignable&) = default;
+  MoveAssignable& operator=(MoveAssignable&&) = delete;
+};
+
 }  // namespace internal
 
 // base::Optional is a Chromium version of the C++17 optional class:
@@ -279,12 +331,18 @@ class OptionalBase {
 // - No exceptions are thrown, because they are banned from Chromium.
 // - All the non-members are in the 'base' namespace instead of 'std'.
 template <typename T>
-class Optional : public internal::OptionalBase<T> {
+class Optional
+    : public internal::OptionalBase<T>,
+      public internal::CopyConstructible<std::is_copy_constructible<T>::value>,
+      public internal::MoveConstructible<std::is_move_constructible<T>::value>,
+      public internal::CopyAssignable<std::is_copy_constructible<T>::value &&
+                                      std::is_copy_assignable<T>::value>,
+      public internal::MoveAssignable<std::is_move_constructible<T>::value &&
+                                      std::is_move_assignable<T>::value> {
  public:
   using value_type = T;
 
   // Defer default/copy/move constructor implementation to OptionalBase.
-  // TODO(hidehiko): Implement conditional enabling.
   constexpr Optional() = default;
   constexpr Optional(const Optional& other) = default;
   constexpr Optional(Optional&& other) = default;
@@ -315,7 +373,6 @@ class Optional : public internal::OptionalBase<T> {
   ~Optional() = default;
 
   // Defer copy-/move- assign operator implementation to OptionalBase.
-  // TOOD(hidehiko): Implement conditional enabling.
   Optional& operator=(const Optional& other) = default;
   Optional& operator=(Optional&& other) = default;
 
-- 
2.14.3

