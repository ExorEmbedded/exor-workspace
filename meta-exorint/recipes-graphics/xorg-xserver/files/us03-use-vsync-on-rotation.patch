diff -uNr xorg-server-1.14.0.2/miext/shadow/Makefile.am xorg-server-1.14.0/miext/shadow/Makefile.am
--- xorg-server-1.14.0.2/miext/shadow/Makefile.am	2017-08-06 19:00:40.020219048 +0200
+++ xorg-server-1.14.0/miext/shadow/Makefile.am	2017-08-06 19:03:01.761595222 +0200
@@ -1,6 +1,6 @@
 noinst_LTLIBRARIES = libshadow.la
 
-AM_CFLAGS = $(DIX_CFLAGS)
+AM_CFLAGS = $(DIX_CFLAGS) $(XORG_INCS)
 
 if XORG
 sdk_HEADERS = shadow.h
diff -uNr xorg-server-1.14.0.2/miext/shadow/shrotate.c xorg-server-1.14.0/miext/shadow/shrotate.c
--- xorg-server-1.14.0.2/miext/shadow/shrotate.c	2017-08-06 19:00:40.020219048 +0200
+++ xorg-server-1.14.0/miext/shadow/shrotate.c	2017-08-06 19:07:54.992421102 +0200
@@ -38,6 +38,14 @@
 #include    "shadow.h"
 #include    "fb.h"
 
+#include <sys/ioctl.h>
+#include <unistd.h>
+
+#include "xf86.h"
+#include "../../hw/xfree86/fbdevhw/fbdevhw.h"
+
+#define MXCFB_WAIT_FOR_VSYNC    _IOW('F', 0x20, u_int32_t)
+
 /*
  * These indicate which way the source (shadow) is scanned when
  * walking the screen in a particular direction
@@ -48,6 +56,9 @@
 #define TOP_TO_BOTTOM	2
 #define BOTTOM_TO_TOP	-2
 
+#define BLOCKSIZE_WIDTH 32
+#define BLOCKSIZE_HEIGHT 32
+
 void
 shadowUpdateRotatePacked(ScreenPtr pScreen, shadowBufPtr pBuf)
 {
@@ -61,9 +72,9 @@
     _X_UNUSED int shaXoff, shaYoff;
     int box_x1, box_x2, box_y1, box_y2;
     int sha_x1 = 0, sha_y1 = 0;
-    int scr_x1 = 0, scr_x2 = 0, scr_y1 = 0, scr_y2 = 0, scr_w, scr_h;
+    int scr_x1 = 0, scr_x2 = 0, scr_y1 = 0, scr_y2 = 0, scr_w, scr_h, scr_size;
     int scr_x, scr_y;
-    int w;
+    int h, w, i, ht;
     int pixelsPerBits;
     int pixelsMask;
     FbStride shaStepOverY = 0, shaStepDownY = 0;
@@ -212,6 +223,7 @@
         }
         scr_w = ((scr_x2 - scr_x1) * shaBpp) >> FB_SHIFT;
         scr_h = scr_y2 - scr_y1;
+        scr_size = scr_x2 - scr_x1;
         scr_y = scr_y1;
 
         /* shift amount for first pixel on screen */
@@ -221,78 +233,134 @@
         shaLine = (shaBits +
                    sha_y1 * shaStride + ((sha_x1 * shaBpp) >> FB_SHIFT));
 
-        /*
-         * Copy the bits, always write across the physical frame buffer
-         * to take advantage of write combining.
-         */
-        while (scr_h--) {
-            int p;
-            FbBits bits;
-            FbBits *win;
-            int i;
-            CARD32 winSize;
-
-            sha = shaLine;
-            shaShift = shaFirstShift;
-            w = scr_w;
-            scr_x = scr_x1 * shaBpp >> FB_SHIFT;
-
-            while (w) {
-                /*
-                 * Map some of this line
-                 */
-                win = (FbBits *) (*pBuf->window) (pScreen,
-                                                  scr_y,
-                                                  scr_x << 2,
-                                                  SHADOW_WINDOW_WRITE,
-                                                  &winSize, pBuf->closure);
-                i = (winSize >> 2);
-                if (i > w)
-                    i = w;
-                w -= i;
-                scr_x += i;
-                /*
-                 * Copy the portion of the line mapped
-                 */
-                while (i--) {
-                    bits = 0;
-                    p = pixelsPerBits;
-                    /*
-                     * Build one word of output from multiple inputs
-                     *
-                     * Note that for 90/270 rotations, this will walk
-                     * down the shadow hitting each scanline once.
-                     * This is probably not very efficient.
-                     */
-                    while (p--) {
-                        bits = FbScrLeft(bits, shaBpp);
-                        bits |= FbScrRight(*sha, shaShift) & shaMask;
-
-                        shaShift -= shaStepOverX;
-                        if (shaShift >= FB_UNIT) {
-                            shaShift -= FB_UNIT;
-                            sha--;
-                        }
-                        else if (shaShift < 0) {
-                            shaShift += FB_UNIT;
-                            sha++;
+        ScrnInfoPtr pScrn;
+        CARD32  winSize;
+
+        FbBits* win;
+        FbBits* winLine;
+        FbBits* _shaLine;
+        FbBits* _sha;
+        FbBits* tmpBuffer;
+        FbBits* tmpLine;
+        FbBits* tmp;
+
+        FbBits* frameBuffer = (FbBits *) (*pBuf->window) (pScreen,
+                                            0,
+                                            0,
+                                            SHADOW_WINDOW_WRITE,
+                                            &winSize,
+                                           pBuf->closure);
+
+        switch (pBuf->randr & (SHADOW_ROTATE_ALL)) {
+            case SHADOW_ROTATE_90:
+            case SHADOW_ROTATE_270:
+
+            /* Portrait mode. Writing directly to the framebuffer is too slow because of the high number
+             * of cache misses when compared to landscape mode. For this reason we do this in 2 steps:
+             *     1. Rotate on a temporary framebuffer. We are copying data in blocks of BLOCKSIZE_WIDTH x BLOCKSIZE_HEIGHT
+             *        as it seems the fastest way.
+             *     2. Wait for VSync and copy straight data from temporary buffer to framebuffer.
+            */
+
+            // Rotate shadow into tmpBuffer
+
+            tmpBuffer = (FbBits*)malloc(sizeof(FbBits)*scr_size*scr_h);
+            tmpLine = tmpBuffer;
+            tmp = tmpBuffer;
+
+            for (scr_y = 0; scr_y < scr_h; scr_y += BLOCKSIZE_HEIGHT)
+            {
+
+                sha = shaLine;
+
+                for (scr_x = 0; scr_x < scr_size; scr_x += BLOCKSIZE_WIDTH)
+                {
+
+                    h = BLOCKSIZE_HEIGHT;
+                    w = BLOCKSIZE_WIDTH;
+
+                    if (scr_y + h > scr_h)
+                        h = scr_h - scr_y;
+                    if (scr_x + w > scr_size)
+                        w = scr_size - scr_x;
+
+                    _shaLine = sha;
+                    tmpLine = (FbBits *) (tmpBuffer + (scr_y * scr_size) + (scr_x));
+                    ht=h; // ht=w;
+
+                    while(ht--) { // lines
+
+                        tmp = tmpLine;
+                        _sha = _shaLine;
+                        i = w;
+
+                        while (i--) { // pixels
+                            *tmp++ = *_sha;
+                            _sha += shaStepOverY;
                         }
-                        sha += shaStepOverY;
+
+                        if (shaStepDownX < 0)
+                            _shaLine--;
+                        else
+                            _shaLine++;
+
+                        tmpLine = (FbBits *) (tmpLine + scr_size);
                     }
-                    *win++ = bits;
+
+                    sha += BLOCKSIZE_WIDTH * shaStepOverY;
                 }
+
+                shaLine += ((BLOCKSIZE_HEIGHT * shaStepDownX) >> FB_SHIFT);
             }
-            scr_y++;
-            shaFirstShift -= shaStepDownX;
-            if (shaFirstShift >= FB_UNIT) {
-                shaFirstShift -= FB_UNIT;
-                shaLine--;
-            }
-            else if (shaFirstShift < 0) {
-                shaFirstShift += FB_UNIT;
-                shaLine++;
+
+            scr_h = scr_y2 - scr_y1;
+            scr_y = scr_y1;
+	    tmp = tmpBuffer;
+
+            // Wait for VSync
+	    int dummy;
+            pScrn = xf86ScreenToScrn(pScreen);
+	    while ( ioctl(fbdevHWGetFD(pScrn), MXCFB_WAIT_FOR_VSYNC, &dummy) ){}
+
+            // Write to framebuffer
+            while (scr_h--) { //lines
+
+                scr_x = scr_x1 * shaBpp >> FB_SHIFT;
+                win = (FbBits *) ((CARD8*)frameBuffer + (scr_y * winSize) + (scr_x << 2));
+
+                i = scr_w;
+                scr_x += i;
+
+                while (i--) // pixels
+                    *win++ = *tmp++;
+
+                scr_y++;
             }
-            shaLine += shaStepDownY;
+
+            free(tmpBuffer);
+            break;
+
+            case SHADOW_ROTATE_180:
+
+            /* Landscape mode. Here cache misses are not a problem, write directly to the framebuffer.
+             * VSync is not required
+            */
+            while (scr_h--) { //lines
+
+                sha = shaLine;
+                scr_x = scr_x1 * shaBpp >> FB_SHIFT;
+
+                win = (FbBits *) ((CARD8*)frameBuffer + (scr_y * winSize) + (scr_x << 2));
+                i = scr_w;
+                scr_x += i;
+
+                while (i--) // pixels
+                    *win++ = *sha--;
+
+                scr_y++;
+                shaLine += shaStepDownY;
+           }
+
         }
     }
 }
