#!/bin/bash

# /etc/init.d/router: start and stop Router Service
#
# NOTE: when using sys_params, use -l to force lib mode because Router Service
# may be called by EPAD.. D-Bus mode results in infinite loops

NAME="router"
PIDFILE="/var/run/${NAME}.pid"  # fake

. /etc/exorint.funcs
. /etc/network/defaults

# write to standard error and syslog
log()
{
    >&2 echo "$@"
    echo "$@" | logger -t router
}

die()
{
    >&2 echo $@
    exit 1
}

# List valid routeable interfaces (also if currently not available)
list_ifaces()
{
    local ifaces="$(cd /sys/class/net && ls -d eth* | tr '\n' ' ' 2>/dev/null)"
    ifaces="${ifaces} wifi0 wlan0 tun0 tap0 tap1 br0"
    echo -n "${ifaces}"
}

do_start()
{
    if [ -e ${PIDFILE} ]; then 
        log "Already running - refusing to start!"
        exit 1
    fi

    log "Starting ${NAME}"

    # Load additional kernel modules
    modprobe nf_nat_ftp

    if ! grep -q '^router\\share\\interfaces\\' /etc/EPAD/system.ini; then

        log "No Router system parameters found - using default configuration"

        # masquerade packets coming from VPN (endpoint reachability)
        iptables -A PREROUTING -t mangle -i tap0 -j MARK --set-mark 1 -m comment --comment "mark VPN packets for natting"
        iptables -A PREROUTING -t mangle -i tap1 -j MARK --set-mark 1 -m comment --comment "mark VPN packets for natting"  # [see #814]
        iptables -A PREROUTING -t mangle -i tun0 -j MARK --set-mark 1 -m comment --comment "mark VPN packets for natting"
        iptables -A POSTROUTING -t nat -j MASQUERADE -m mark --mark 1

        # masquerade packets coming from LAN and WIFI to outgoing interfaces (internet sharing)
        for liface in $LAN_INTERFACES; do
            iptables -A PREROUTING -t mangle -i $liface -j MARK --set-mark 2 -m comment --comment "mark LAN packets for natting"
        done
        for wiface in $(sys_params -l network/wifi/autostartInterfaces 2>/dev/null); do
            iptables -A PREROUTING -t mangle -i $wiface -j MARK --set-mark 3 -m comment --comment "mark WIFI packets for natting"
        done

        # => WAN
        iptables -A POSTROUTING -t nat -j MASQUERADE -o $WAN_INTERFACE -m mark --mark 2
        iptables -A POSTROUTING -t nat -j MASQUERADE -o $WAN_INTERFACE -m mark --mark 3

        # => WLAN
        for wiface in $(sys_params -l network/wifi/autostartInterfaces 2>/dev/null); do
            iptables -A POSTROUTING -t nat -j MASQUERADE -o $wiface -m mark --mark 2
        done

        # => PPP
        iptables -A POSTROUTING -t nat -j MASQUERADE -o ppp0 -m mark --mark 2

    else

        log "Found Router system parameters"

        local i=1
        local allIfaces="$(list_ifaces)"
        for fromIface in $allIfaces; do
            local toIfaces="$(sys_params -l services/router/share/interfaces/$fromIface 2>/dev/null)"
            [ "$toIfaces" = "" ] && continue
            log "Found sharing key: from '$fromIface' to '$toIfaces'"
            iptables -A PREROUTING -t mangle -i $fromIface -j MARK --set-mark $i -m comment --comment "mark for NAT"
            if [ "$toIfaces" = "ALL" ]; then 
                iptables -A POSTROUTING -t nat -j MASQUERADE -m mark --mark $i
            else
                for iface in $toIfaces; do
                    iptables -A POSTROUTING -t nat -j MASQUERADE -o ${iface} -m mark --mark $i
                done
            fi
            i=$((i+1))
        done
    fi

    local fwdBlock="$(sys_params -l services/router/forward/block 2>/dev/null)"
    [ "${fwdBlock}" = "true" ] && iptables -A FORWARD -j DROP

    # and allow forwarding of packets to endpoints
    >&2 sysctl -w net.ipv4.ip_forward=1 

    touch "${PIDFILE}"

    log "Started"
    >&2 echo "."
}

do_stop()
{
    log "Stopping ${NAME}"

    >&2 sysctl -w net.ipv4.ip_forward=0

    iptables -F
    iptables -t nat -F
    iptables -t mangle -F

    rm -f "${PIDFILE}"

    log "Stopped"
    >&2 echo "."
}

case "$1" in

  start)
    do_start
    ;;

  stop)
    do_stop
    ;;

  restart)

    do_stop
    do_start

    ;;

  status)
    if [ ! -e ${PIDFILE} ]; then 
        echo "NOT running!"
        exit 1
    fi
    >&2 echo "Running."
    ;;

  *)
    >&2 echo "Usage: /etc/init.d/${NAME} {start|stop|restart|status}"
    exit 1
esac

exit 0
